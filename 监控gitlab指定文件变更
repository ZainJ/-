# -*- coding: utf-8 -*-
import gitlab
import os
import sys


class gitlab_control:

    def __init__(self, gitlab_url, private_token, project_id, branch):
        self.git = gitlab.Gitlab(gitlab_url, private_token=private_token)
        self.project = self.git.projects.get(project_id)
        self.branch = branch

    # get the diffs and only get contain "/" for diffs
    def get_The_Diff_Of_Gitlab(self, branch):
        diff = []
        str = '/'
        commits = self.project.commits.list(ref_name=branch)
        commit_id_1 = commits[0].id
        commit_id_2 = commits[1].id
        result = self.project.repository_compare(commit_id_2, commit_id_1)
        for file_diff in result['diffs']:
            direct = file_diff.get("new_path").encode("utf-8")
            if str in direct:
                diff.append(file_diff.get("new_path").encode("utf-8"))
        return diff

    def all_Files_Path(self, filepath):
        num = 0
        directorys = filepath.split(";")
        diffs = self.get_The_Diff_Of_Gitlab(self.branch)
        for directory in directorys:
            for diff in diffs:
                if directory in diff:
                    num += 1
        if num == 0:
            return False
        else:
            return True

    def all_Exclude_File_Paths(self, excludeFilePaths):
        num = 0
        directorys = excludeFilePaths.split(";")
        diffs = self.get_The_Diff_Of_Gitlab(self.branch)
        diffs_len = len(diffs)
        for directory in directorys:
            for diff in diffs:
                if directory in diff:
                    num += 1
        if num == diffs_len:
            return False
        else:
            return True

    def base_common_trigger(self, filePaths, common_token, branch, commons_pipeline):
        notification = "--request POST --form token=%s --form ref=%s --form variables[NUMBER]=1  %s" % (
            common_token, branch, commons_pipeline)
        if self.all_Files_Path(filePaths):
            os.system("curl %s" % (notification))

    def framework_trigger(self, filePaths, framework_token, branch, framework_pipeline):
        notification = "--request POST --form token=%s --form ref=%s --form variables[NUMBER]=2  %s" % (
            framework_token, branch, framework_pipeline)
        print notification
        if self.all_Exclude_File_Paths(filePaths):
            os.system("curl %s" % (notification))

    def othercommons_trigger(self, filePaths, filePaths2, common_token, branch, commons_pipeline):
        notification = "--request POST --form token=%s --form ref=%s --form variables[NUMBER]=3  %s" % (
            common_token, branch, commons_pipeline)
        if self.all_Files_Path(filePaths2)and self.all_Exclude_File_Paths(filePaths):
                os.system("curl %s" % (notification))

    def business_trigger(self, filePaths, framework_token, branch, framework_pipeline):
        notification = "--request POST --form token=%s --form ref=%s --form variables[NUMBER]=4  %s" % (
            framework_token, branch, framework_pipeline)
        if self.all_Files_Path(filePaths):
            os.system("curl %s" % (notification))

    def autotest_trigger(self, filePaths, common_token, branch, commons_pipeline):
        notification = "--request POST --form token=%s --form ref=%s --form variables[NUMBER]=5  %s" % (
            common_token, branch, commons_pipeline)
        if self.all_Files_Path(filePaths):
            os.system("curl %s" % (notification))

    def hero_trigger(self, HERO_TOKEN, branch, HERO_PIPELINE):
        notification = "--request POST --form token=%s --form ref=%s --form variables[NUMBER]=6  %s" % (
            HERO_TOKEN, branch, HERO_PIPELINE)
        os.system("curl %s" % (notification))

    def iamcommon_trigger(self, filePaths, common_token, branch, commons_pipeline):
        notification = "--request POST --form token=%s --form ref=%s --form variables[NUMBER]=7  %s" % (
            common_token, branch, commons_pipeline)
        if self.all_Files_Path(filePaths):
            os.system("curl %s" % (notification))


if __name__ == "__main__":
    git_object = gitlab_control(sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[6])
    if sys.argv[1] == "iamv2_commons":
        git_object.base_common_trigger(sys.argv[8], sys.argv[5], sys.argv[6], sys.argv[7])
        git_object.othercommons_trigger(sys.argv[9], sys.argv[10], sys.argv[5], sys.argv[6],sys.argv[7])
        git_object.autotest_trigger(sys.argv[11], sys.argv[5], sys.argv[6], sys.argv[7])
        git_object.iamcommon_trigger(sys.argv[12], sys.argv[5], sys.argv[6], sys.argv[7])
    elif sys.argv[1] == "iamv2_framework":
        git_object.framework_trigger(sys.argv[8], sys.argv[5], sys.argv[6], sys.argv[7])
        git_object.business_trigger(sys.argv[9], sys.argv[5], sys.argv[6], sys.argv[7])
    elif sys.argv[1] == "iamv2_testtool":
        git_object.hero_trigger(sys.argv[5], sys.argv[6], sys.argv[7])
